#include "aes/aes.hh"

static constexpr u32 sbox[256] = {
    0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
    0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
    0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
    0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
    0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
    0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
    0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
    0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
    0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
    0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
    0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
    0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
    0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
    0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
    0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
    0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
};

static constexpr u8 rsbox[256] = {
    0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
    0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
    0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
    0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
    0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
    0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
    0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
    0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
    0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
    0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
    0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
    0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
    0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
    0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
    0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d
};

static const u8 Rcon[11] = {
    0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36
};

static inline u32 ROTL32(const u32 &x, const u32 &&n)
{
    return (x << n) | (x >> (32 - n));
}

static inline u32 ROTR32(const u32 &x, const u32 &&n)
{
    return (x >> n) | (x << (32 - n));
}

static inline u32 LOAD32(const u8 dst[4])
{
    return static_cast<u32>(dst[0]) << 24 |
           static_cast<u32>(dst[1]) << 16 |
           static_cast<u32>(dst[2]) <<  8 |
           static_cast<u32>(dst[3]);
}

static inline void PACK32(u8 dst[4], const u32 &w)
{
    dst[0] = w >> 24;
    dst[1] = w >> 16;
    dst[2] = w >> 8;
    dst[3] = w;
}

static inline u32 LOAD32(const u8 &a, const u8 &b, const u8 &c, const u8 &d)
{
    return static_cast<u32>(a) << 24 |
           static_cast<u32>(b) << 16 |
           static_cast<u32>(c) <<  8 |
           static_cast<u32>(d);
}

static inline void PACK32(u8 &a, u8 &b, u8 &c, u8 &d, const u32 &w)
{
    a = w >> 24;
    b = w >> 16;
    c = w >> 8;
    d = w;
}

static inline void sub_bytes(u8 b[AESXXX_BL])
{
    for (u32 i = 0; i < AESXXX_BL; ++i) {
        b[i] = sbox[b[i]];
    }
}

static inline void inv_sub_bytes(u8 b[AESXXX_BL])
{
    for (u32 i = 0; i < AESXXX_BL; ++i) {
        b[i] = rsbox[b[i]];
    }
}

static inline void shift_rows(u8 b[AESXXX_BL])
{
    u32 r2 = LOAD32(*(b + 1), *(b + 5), *(b + 9),  *(b + 13));
    u32 r3 = LOAD32(*(b + 2), *(b + 6), *(b + 10), *(b + 14));
    u32 r4 = LOAD32(*(b + 3), *(b + 7), *(b + 11), *(b + 15));

    r2 = ROTL32(r2, 8);
    r3 = ROTL32(r3, 16);
    r4 = ROTL32(r4, 24);

    PACK32(*(b + 1), *(b + 5), *(b + 9),  *(b + 13), r2);
    PACK32(*(b + 2), *(b + 6), *(b + 10), *(b + 14), r3);
    PACK32(*(b + 3), *(b + 7), *(b + 11), *(b + 15), r4);
}

static inline void inv_shift_rows(u8 b[AESXXX_BL])
{
    u32 r2 = LOAD32(*(b + 1), *(b + 5), *(b + 9),  *(b + 13));
    u32 r3 = LOAD32(*(b + 2), *(b + 6), *(b + 10), *(b + 14));
    u32 r4 = LOAD32(*(b + 3), *(b + 7), *(b + 11), *(b + 15));

    r2 = ROTR32(r2, 8);
    r3 = ROTR32(r3, 16);
    r4 = ROTR32(r4, 24);

    PACK32(*(b + 1), *(b + 5), *(b + 9),  *(b + 13), r2);
    PACK32(*(b + 2), *(b + 6), *(b + 10), *(b + 14), r3);
    PACK32(*(b + 3), *(b + 7), *(b + 11), *(b + 15), r4);
}

static inline u8 xtime(const u8 &x)
{
    return (x << 1) ^ (0x1b & -(x >> 7));
}

static inline u8 mul2(const u8 &x)
{
    return xtime(x);
}

static inline u8 mul3(const u8 &x)
{
    return xtime(x) ^ x;
}

static inline u8 mul9(const u8 &x)
{
    return xtime(xtime(xtime(x))) ^ x;
}

static inline u8 mul11(const u8 &x)
{
    return xtime(xtime(xtime(x)) ^ x) ^ x;
}

static inline u8 mul13(const u8 &x)
{
    return xtime(xtime(xtime(x) ^ x)) ^ x;
}

static inline u8 mul14(const u8 &x)
{
    return xtime(xtime(xtime(x) ^ x) ^ x);
}

static inline void _mix_column(u8 &a, u8 &b, u8 &c, u8 &d)
{
    const u8 x0 = a, x1 = b, x2 = c, x3 = d;

    a = mul2(x0) ^ mul3(x1) ^      x2  ^      x3;
    b =      x0  ^ mul2(x1) ^ mul3(x2) ^      x3;
    c =      x0  ^      x1  ^ mul2(x2) ^ mul3(x3);
    d = mul3(x0) ^      x1  ^      x2  ^ mul2(x3);
}

static inline void _inv_mix_column(u8 &a, u8 &b, u8 &c, u8 &d)
{
    const u8 x0 = a, x1 = b, x2 = c, x3 = d;

    a = mul14(x0) ^ mul11(x1) ^ mul13(x2) ^  mul9(x3);
    b =  mul9(x0) ^ mul14(x1) ^ mul11(x2) ^ mul13(x3);
    c = mul13(x0) ^  mul9(x1) ^ mul14(x2) ^ mul11(x3);
    d = mul11(x0) ^ mul13(x1) ^  mul9(x2) ^ mul14(x3);
}

static inline void mix_columns(u8 b[AESXXX_BL])
{
    _mix_column(b[0],  b[1],  b[2],  b[3]);
    _mix_column(b[4],  b[5],  b[6],  b[7]);
    _mix_column(b[8],  b[9],  b[10], b[11]);
    _mix_column(b[12], b[13], b[14], b[15]);
}

static inline void inv_mix_columns(u8 b[AESXXX_BL])
{
    _inv_mix_column(b[0],  b[1],  b[2],  b[3]);
    _inv_mix_column(b[4],  b[5],  b[6],  b[7]);
    _inv_mix_column(b[8],  b[9],  b[10], b[11]);
    _inv_mix_column(b[12], b[13], b[14], b[15]);
}

static inline void add_round_key(u32 r, u8 b[AESXXX_BL], const u8 *rk)
{
    for (u32 i = 0; i < AESXXX_BL; ++i) {
        b[i] ^= rk[(r * AESXXX_BL) + i];
    }
}

static inline void xor_with_iv(u8 b[AESXXX_BL], const u8 iv[AESXXX_BL])
{
    for (u32 i = 0; i < AESXXX_BL; i += 4) {
        b[i + 0] ^= iv[i + 0];
        b[i + 1] ^= iv[i + 1];
        b[i + 2] ^= iv[i + 2];
        b[i + 3] ^= iv[i + 3];
    }
}

void AES::key_expansion(const u8 *key)
{
    const u32 total_words = nb * (nr + 1);
    u8 temp[4];

    // 复制初始密钥
    for (u32 i = 0; i < nk; ++i) {
        for (u32 j = 0; j < 4; ++j) {
            round_key[4 * i + j] = key[4 * i + j];
        }
    }

    for (u32 i = nk; i < total_words; ++i) {
        // 取前一个 word
        for (u32 j = 0; j < 4; ++j) {
            temp[j] = round_key[4 * (i - 1) + j];
        }

        // 每 nk 个 word 做一次特殊变换
        if (i % nk == 0) {
            // RotWord + SubWord
            const u32 w = ROTL32(LOAD32(temp), 8);
            PACK32(temp, w);

            for (u8 &b : temp) {
                b = sbox[b];
            }

            temp[0] ^= Rcon[i / nk];
        }
        // AES-256 特有的额外 SubWord
        else if (nk > 6 && i % nk == 4) {
            for (u8 &b : temp) {
                b = sbox[b];
            }
        }

        // 生成新 word
        for (u32 j = 0; j < 4; ++j) {
            round_key[4 * i + j] = round_key[4 * (i - nk) + j] ^ temp[j];
        }
    }
}

void AES::cipher(u8 b[AESXXX_BL], const u8 *rk)
{
    u32 round = 0;

    add_round_key(round, b, rk);

    for (round = 1; ; ++round) {
        sub_bytes(b);
        shift_rows(b);

        if (round == this->nr) break;

        mix_columns(b);
        add_round_key(round, b, rk);
    }

    add_round_key(this->nr, b, rk);
}

void AES::inv_cipher(u8 b[AESXXX_BL], const u8 *rk)
{
    u32 round = 0;

    add_round_key(this->nr, b, rk);

    for (round = (this->nr - 1); ; --round) {
        inv_shift_rows(b);
        inv_sub_bytes(b);
        add_round_key(round, b, rk);

        if (round == 0) break;

        inv_mix_columns(b);
    }
}

AES::AES(const u8 *key, AES_KEYSIZE key_size)
{
    this->key_size = key_size;

    switch (key_size) {
    case AES_KEYSIZE::AES128:
        this->nk = AES128_NK; this->nr = AES128_NR; break;
    case AES_KEYSIZE::AES192:
        this->nk = AES192_NK; this->nr = AES192_NR; break;
    case AES_KEYSIZE::AES256:
        this->nk = AES256_NK; this->nr = AES256_NR; break;
    }

    this->key_expansion(key);
}

AES::~AES()
{
    memset(this->round_key, 0x00, sizeof(this->round_key));
}

void AES::ecb_encrypt(u8 *buffer, size_t length)
{
    for (size_t i = 0; i < length; i += AESXXX_BL) {
        this->cipher(buffer + i, this->round_key);
    }
}

void AES::ecb_decrypt(u8 *buffer, size_t length)
{
    for (size_t i = 0; i < length; i += AESXXX_BL) {
        this->inv_cipher(buffer + i, this->round_key);
    }
}
